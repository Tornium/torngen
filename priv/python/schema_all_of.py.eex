import typing
from dataclasses import dataclass

from ..base_schema import BaseSchema
<%= for import <- schema |> Torngen.Generator.Python.Schema.filter_imports(spec) do %>
from .<%= import |> Macro.underscore() %> import <%= import %><% end %>

@dataclass
class <%= schema.reference %>(BaseSchema):<% pairs = Enum.flat_map(schema.types, fn type -> Torngen.Spec.Reference.maybe_resolve(spec, type) |> Map.get(:pairs, []) end) |> Enum.uniq_by(fn pair -> pair.key end) %>
    <%= for pair <- pairs do %>
    <%= pair.key |> Torngen.Generator.Python.handle_reserved() %>: <%= Torngen.Generator.Python.Schema.resolve_type(pair.value, spec) %><% end %>

    @staticmethod
    def parse(data):
        return <%= schema.reference %>(<%= for pair <- pairs do %>
        <%= pair.key |> Torngen.Generator.Python.handle_reserved() %>=BaseSchema.parse(data.get("<%= pair.key %>"), <%= pair.value |> Torngen.Generator.Python.Schema.resolve_type(spec) %>),
        <% end %>)
