defmodule Torngen.Client.Schema.<%= schema.reference %> do
  @moduledoc """
  """

  @behaviour Torngen.Client.Schema

  defstruct [<%= for pair <- schema.pairs do %>
    :<%= pair.key |> Torngen.Generator.Elixir.normalize_string() %>,<% end %>
  ]

  # TODO: Handle required values in schema parser
  @required []
  @type t :: %__MODULE__{<%= for pair <- schema.pairs do %>
    <%= pair.key |> Torngen.Generator.Elixir.normalize_string() %>: <%= Torngen.Generator.Elixir.Schema.resolve_type(pair.value, spec) %>,<% end %>
  }

  @spec required() :: list(atom())
  def required(), do: @required

  @impl true
  def parse(%{} = data) do
    %__MODULE__{<%= for pair <- schema.pairs do %><%= if not String.contains?(pair.key, "-") do %>
      <%= pair.key |> Torngen.Generator.Elixir.normalize_string() %>: Map.get(data, "<%= pair.key %>"),<% end %><% end %>
    }
    # TODO: Handle values that are not literals
    # TODO: Handle default values in schema parser and codegen
  end
end
